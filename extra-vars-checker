#!/usr/bin/env python

import sys
import yaml

extra_vars = None
extra_vars_comes_next = False

for arg in sys.argv:
    if arg == '-e':
        extra_vars_comes_next = True
        continue
    elif arg.startswith('--extra-vars='):
        extra_vars = arg[13:]
    elif extra_vars_comes_next:
        extra_vars = arg
    extra_vars_comes_next = False

# If no -e or --extra_vars, the arguments passed the following checks
if extra_vars is None:
    print('INFO: No extra-vars in the specified arguments.')
    exit(0)

# c.f. http://stackoverflow.com/questions/5389507/iterating-over-every-two-elements-in-a-list
def grouped(iterable, n):
    return zip(*[iter(iterable)]*n)

# Read allowed names
allowed_names = []
with open('extra-vars.yml') as stream:
    try:
        all_extra_vars = yaml.load(stream)
        for playbook_name in all_extra_vars.keys():
            if playbook_name in sys.argv:
                allowed_names = all_extra_vars[playbook_name]

    except yaml.YAMLError as e:
        print('ERROR: YAML Error: {}'.format(e))
        exit(1)

if len(allowed_names) == 0:
    print('INFO: No configuration for the specified arguments in extra-vars.yml.')
    print('INFO: All extra-vars are allowed.')
    exit(0)

for vars in extra_vars.split(' '):
    if vars.count('=') != 1:
        print('ERROR: Invalid extra-var format: {}'.format(vars))
        exit(1)
    
    for name, value in grouped(vars.split('='), 2):
        if not (name in allowed_names):
            print('ERROR: extra-var {} is not allowed.'.format(name))
            exit(1)

print('INFO: All extra-vars are allowed.')
exit(0)


